---
description: Arma 3 Multiplayer Scripting
globs: *.sqf
alwaysApply: false
---
# Arma 3 Multiplayer Scripting Guidelines

## 1. Understanding Multiplayer Architecture

### 1.1 Client-Server Architecture
- Arma 3 uses a client-server architecture for multiplayer
- Server is the authority for game state
- Clients receive updates from the server
- JIP (Join In Progress) players need special consideration

### 1.2 Machine Types
- **Server**: Can be dedicated or player-hosted
- **Client**: Players connecting to the server
- **Headless Client**: Server-side processing without visual interface

## 2. Locality System

### 2.1 Locality Checks
- Always check where code is executing before performing certain actions
- Use these pre-defined variables for checks:
  - `isServer`: Any server (dedicated or player-hosted)
  - `isDedicated`: Dedicated servers only (no interface)
  - `hasInterface`: Any machine with visual interface (player clients)
  - `isMultiplayer`: Whether in multiplayer mode
  - `!(isServer && hasInterface)`: Clients only (not host)
  - `(isServer && hasInterface)`: Player-hosted server only

### 2.2 Common Patterns
```sqf
// Server-only code
if (isServer) then {
    // Code that should run only on server
};

// Client-only code
if (hasInterface) then {
    // Code that should run only on clients
};

// Headless client code
if (!hasInterface && !isDedicated) then {
    // Code that should run only on headless clients
};
```

## 3. Network Communication

### 3.1 Remote Execution

- Use `remoteExec` and `remoteExecCall` for network communication
- Always specify target machine(s) explicitly:
  - `0`: Execute on server only
  - `1`: Execute on all clients (including server if it has interface)
  - `2`: Execute on all machines (server, clients, HC)
  - Client ID: Execute on specific client
  - Object: Execute on machine where object is local

```sqf
// Execute on server
[_params] remoteExec ["FUNC(serverFunction)", 0];

// Execute on all clients
[_params] remoteExec ["FUNC(clientFunction)", -2];

// Execute on specific client
[_params] remoteExec ["FUNC(specificClientFunction)", _clientID];

// Execute where object is local
[_params] remoteExec ["FUNC(objectFunction)", _object];
```

### 3.2 Public Variables

- Use public variables (`publicVariable`, `publicVariableServer`, `publicVariableClient`) for state synchronization
- Prefix all public variables with the mod prefix to avoid conflicts
- Consider using CBA events instead for cleaner code

```sqf
// Setting and broadcasting a public variable
GVAR(someValue) = 5;
publicVariable QGVAR(someValue);

// Alternative using CBA Events (preferred)
["dta_eventName", [_param1, _param2]] call CBA_fnc_globalEvent;
```

## 4. Object Ownership & Locality

### 4.1 Object Locality

- Objects are "local" to one machine at a time
- Only the machine where an object is local can control certain aspects
- Use `local _object` to check if an object is local
- Use `owner _object` to get the owner's client ID

### 4.2 JIP Considerations

- Consider players joining mid-mission
- Use `remoteExec` with `jip` parameter for persistent actions
- Store JIP IDs for later removal if needed

```sqf
// JIP persistent action
_jipID = [_params] remoteExec ["FUNC(setupClient)", -2, true];

// Store the JIP ID for later removal if needed
GVAR(myJipID) = _jipID;

// Remove a JIP entry later
remoteExec ["", GVAR(myJipID)];
```

## 5. Scheduler Considerations in MP

### 5.1 Avoid Scheduled Code

- Never use `spawn`, `execVM`, `sleep`, or `waitUntil` in MP code
- These can cause desynchronization between clients
- Use CBA alternatives as described in the Code Optimisation rules

### 5.2 Event-Driven Architecture

- Use CBA events for most inter-component communication
- Use `CBA_fnc_globalEvent` for events that need to broadcast
- Use `CBA_fnc_serverEvent` for events that should only be processed by server
- Use `CBA_fnc_localEvent` for local-only events

```sqf
// Global event (all machines)
["dta_flagChanged", [_vehicle, _flagType]] call CBA_fnc_globalEvent;

// Server-only event
["dta_requestSpawn", [_position, _type]] call CBA_fnc_serverEvent;

// Local-only event
["dta_uiUpdate", [_control, _value]] call CBA_fnc_localEvent;
```

## 6. Synchronized Execution

### 6.1 Proper Synchronization

- Never assume actions happen at the same time on all machines
- Use callbacks and events to confirm completion
- Consider using ACE's common_progress for synchronized actions

### 6.2 Object Creation

- Create objects on the server whenever possible
- Use `remoteExec` to inform clients about newly created objects
- Remember objects persist for JIP players but execution does not

## 7. DETH Additions Specific Patterns

### 7.1 Vehicle Customization

- Server should be the authority for vehicle appearance
- Use CBA events to synchronize texture and flag changes
- Consider performance impact of frequent appearance changes

### 7.2 Teleporter System

- Handle teleportation primarily on the server
- Use appropriate remoteExec calls for player movement
- Ensure all clients are properly updated on teleportation

### 7.3 Statistics System

- Store statistics centrally on server
- Use appropriate methods to synchronize with clients
- Consider persistence mechanisms for long-term storage

Following these guidelines will help ensure your Arma 3 mods and scripts work reliably in multiplayer environments, providing a consistent experience for all players regardless of whether they're hosting or joining a mission.
